In this lab, we will review some of the key programming skills that we learned in CSS 142. After this lab, you should be able to:

    control the flow of a program using if, switch, for, and while.
    store primitive data in a one-dimensional array
    write to files using PrintWriter
    define a class to represent a date
    define constructors to initialize an object
    control access to data using private, getters, and setters

 
Program 1: Grader

In this section, we will develop a program that generates a grade report given a set of quiz grades. The program will read a set of grades from the user, write the grades to a file along with the corresponding letter grades and the average grade, and then print the file to the console. For example, if the user enters the grades 90, 73, and 88, then the program will generate the report:

90 A
73 C
88 B
Average: 83.67 B

We will work through this program as a class.
Task 1

Declare a class called Grader. In a main method, prompt the user to enter the number of grades they would like to process. Then, read the number of grades into a variable called numGrades.

What if the user enters a nonpositive number? Use a loop to validate the user's input. The loop should run as long as numGrades is not positive. In the body of the loop, remind the user to enter a positive number, and then read the user's input into numGrades again.
Task 2

Ask the user to enter a series of grades, and store them in an array.

    In the main method, declare an integer array just large enough to store the number of grades which the user wishes to process (numGrades).
    Prompt the user to enter the grades separated by spaces (e.g., 94 75 82).
    In a for loop, read the grades entered by the user and store them in the array.

Task 3

Declare a method called getLetterGrade that takes an integer grade as an argument and returns the corresponding letter grade from "F" to "A". Use a switch statement to assign an "A" if the grade is 90 or greater, a "B" if the grade is between 80 and 90, and so on. You can assume that the quiz grade is between 0 and 100.

public static String getLetterGrade(int grade) {
    String letterGrade;

    switch (grade / 10) {
        // your code here
    }

    return letterGrade;
}

Task 4

Define a method called average that takes a double array as an argument and returns the average value in the array. Use a for loop to sum the elements of the array, and then divide the sum by the number of elements.
Task 5

We need to assign a letter to the average grade, but our getLetterGrade method has an integer parameter. Declare another method called getLetterGrade with a double parameter. In the method, use if and else statements to decide which letter grade to return.

Then answer the following questions in a comment above the method (try an internet search if you are unsure):

    What is it called when two methods have the same return type and name but different parameters?
    Why can't we use a switch statement for the double grade? What primitive data types can we use with switch?

Task 6

Finally, we will write the grades to a file. In the main method:

    Prompt the user for a file name.
    Open the file in a try block.
    Iterate over each grade in the array using a for loop.
        For each grade, on a separate line, write the number grade and the letter grade separated by a space.
    At the end of the file, print the average number grade and letter grade.
    Handle the exception in a catch block.
    Close the file in a finally block.

Here is what the contents of the file might look like:

90 A
73 C
88 B
Average: 83.67 B

 
Program 2: Calculator

Template: Calculator.java

Download Calculator.java

Build a simple calculator that ignores operator precedence (PEMDAS) and only works with integers. This calculator will read in an arithmetic string from the user and calculate the results of that string from left to right. Consider the following left-to-right calculations:

4 + 4 / 2
Answer is 4    // not 6, since the addition occurs first when reading from left to right

1 * -3 + 6 / 3
Answer is 1    // not -1

Read the template program and notice the comments before you proceed. All of your code will go in the calculate function. You may assume that there are spaces between numbers and operators and that if a number is negative, there will be no space between the minus sign and the number.

You can read the input string using a scanner.

Scanner scanner = new Scanner(input);

Then use a switch statement inside of a loop to evaluate the expression.

 
Program 3: Date

In this program, we will review object-oriented programming by designing a class that represents a date (e.g., 10/31/2023).
Task 1

In a new class called Date, define the following items.

    private instance variables to store the day, month, and year (you can assume that the years are CE/AD)
    a constructor that takes the day, month, and year as arguments
    a constructor with no parameters that sets the date to January 1, 1975
    getters and setters for each instance variable
    a method called toString that returns a string representation of the date

Task 2

Answer the following questions in comments at the top of your file.

    Why are instance variables usually set to private?
    Where are private instance variables accessible?

Task 3

Add input validation to your constructors and setters for the month and the year. If an argument is invalid (e.g., 111 for the day), throw an IllegalArgumentException, as in the following example:

if (/* argument is invalid */) {
    throw new IllegalArgumentException("<error message>");
}

Optional

Add input validation to your constructors and setters for the day. Check that the day is no greater than 30 in September, 31 in October, and so on.

 
File Submission

Submit a ZIP file that contains:

    Grader.java
    Calculator.java
    Date.java

 
Credits

Rob Nash originally wrote much of this lab. Edits by others including Johnny Lin and Ryan Decker.
